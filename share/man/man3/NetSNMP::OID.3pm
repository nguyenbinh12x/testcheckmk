.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OID 3pm"
.TH OID 3pm "2021-08-11" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
NetSNMP::OID \- Perl extension for manipulating OIDs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use NetSNMP::OID;
\&
\&  my $oid = new NetSNMP::OID(\*(AqsysContact.0\*(Aq);
\&
\&  if ($oid < new NetSNMP::OID(\*(AqifTable\*(Aq)) {
\&      do_something();
\&  }
\&
\&  my @numarray = $oid\->to_array();
\&
\&  # appending oids
\&  $oid = new NetSNMP::OID(\*(Aq.1.3\*(Aq);
\&  $oid += ".6.1";
\&  # \-> .1.3.6.1
\&
\&  # appending index strings
\&
\&  $oid2 = $oid + "\e"wes\e"";
\&  # \-> .1.3.6.1.3.119.101.115
\&
\&  $oid3 = $oid + "\e\*(Aqwes\e\*(Aq";
\&  # \-> .1.3.6.1.119.101.115
\&
\&  $len = $oid3\->length();
\&  # \-> 7
\&
\&  # retrieving indexes from an oid:
\&  $arrayref = $tableoid\->get_indexes()
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The NetSNMP::OID module is a simple wrapper around a C\-based net-snmp
oid (which is an array of unsigned integers).  The \s-1OID\s0 is internally
stored as a C array of integers for speed purposes when doing
comparisons, etc.
.PP
The standard logical expression operators (<, >, ==, ...) are
overloaded such that lexographical comparisons may be done with them.
.PP
The + operator is overloaded to allow you to append stuff on to the
end of a \s-1OID,\s0 like index segments of a table, for example.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
int snmp_oid_compare(oid1, oid2)
int compare(oid1, oid2)
.SH "AUTHOR"
.IX Header "AUTHOR"
Wes Hardaker, <hardaker@users.sourceforge.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SNMP\s0, perl.
.SH "Copyright"
.IX Header "Copyright"
Copyright (c) 2002 Networks Associates Technology, Inc.  All
Rights Reserved.  This program is free software; you can
redistribute it and/or modify it under the same terms as Perl
itself.
